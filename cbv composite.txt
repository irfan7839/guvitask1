Copy by Reference:
          For composite data types objects are copied by reference. Actual variable and copied variable both refer to same memory location . SO change in data of copied variable will           lead to change in data of original variable too.

         There are 3 ways to copy by value for composite data types.
          1. Using the spread (...) operator
          2. Using the Object.assign() method
          3. Using the JSON.stringify() and JSON.parse() methods

1. Using Spread:
          Spread operator allows an iterable to expand in places where 0+ arguments are expected. It is mostly used in the variable array where there is more than 1 values are           expected. It allows us the privilege to obtain a list of parameters from an array.Using           spread will clone your object. Note this will be a shallow copy.

   E.g:
         var a=[1,2,3];
         var b=a;
         console.log(a,b);   ==> O/P: a=[1,2,3] , b=[1,2,3]
         b[2]=100;
         console.log(a,b); ==> O/P: a=[1,2,100] , b=[1,2,100]
         var c=[...a];
         console.log(a,c); ==> O/P: a=[1,2,100] , b=[1,2,100]
         c[2]=80;
         console.log(a,c); ==> O/P: a=[1,2,100] , b=[1,2,80]

In the above example when copied variable value is changed but original variable value remain same .


2. Using object.assign():
               The Object.assign() method copies all enumerable own properties from one or more source objects to a target object. It returns the target object. Note this will be a shallow copy.

    E.g:
          var a=[1,2,3];
          var b=Object.assign([],a);
           console.log(a,b);   ==> a=[1,2,3] , b=[1,2,3]
           b[2]=100;
           console.log(a,b); ==> a=[1,2,3] , b=[1,2,100]
Note the empty [] as the first argument, this will ensure you don't mutate the original object.


3. Using JSON.parse() and JSON.stringify():
               The JSON object, available in all modern browsers, has two useful methods to deal with JSON-formatted content: parse and stringify. JSON.parse() takes a JSON string and transforms it into a JavaScript object. JSON.stringify() takes a JavaScript object and transforms it into a JSON string.Using JSON.parse() and JSON.stringify() for copy performs deep copy .

  E.g:
       a=[1,2,3];
       var b=JSON.parse(JSON.stringify(a));
       console.log(a,b); ==> O/P: a=[1,2,3] , b=[1,2,3]
       b[2]=100;
       console.log(a,b); ==> O/P: a=[1,2,100] , b=[1,2,100]
The deep copy is a true copy for nested objects. Shallow copy copies only reference in case of nested objects. 
           
         